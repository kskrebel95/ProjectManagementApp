{"ast":null,"code":"import { types } from \"./actions\";\nconst inital_state = {\n  projects: []\n};\n\nconst project = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : inital_state;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type == types.GET_PROJECTS) {\n    const {\n      projects\n    } = action.payload;\n    return { ...state,\n      projects\n    };\n  } else if (action.type == types.CREATE_PROJECT) {\n    const {\n      new_project\n    } = action.payload;\n    const updated_projects = [...state.projects, new_project];\n    localStorage.setItem(\"projects\", JSON.stringify(updated_projects));\n    return { ...state,\n      projects: updated_projects\n    }; // return { ...state, projects: [...state.projects, new_project] };\n  } else if (action.type == types.DELETE_PROJECT) {\n    const {\n      projects,\n      project_id\n    } = action.payload;\n    const updated_projects = projects.filter(project => project.project_id != project_id);\n    localStorage.setItem(\"projects\", JSON.stringify(updated_projects));\n    return {\n      projects: updated_projects\n    };\n  } else if (action.type == types.UPDATE_PROJECT) {\n    const {\n      projects,\n      project_id,\n      updates\n    } = action.payload;\n    console.log(projects, project_id, updates);\n    const index = projects.map(project => project.project_id).indexOf(project_id);\n    const updated_project = projects[index] = updates;\n    console.log(updated_project); // console.log(new_project);\n    // const updated_projects = [...new_project];\n    // console.log(updated_projects);\n    // localStorage.setItem(\"projects\", JSON.stringify(updated_projects));\n    // console.log({ ...state, projects: updated_projects });\n    // return { projects: updated_projects };\n\n    return state;\n  } else {\n    return state;\n  }\n};\n\nexport default project;","map":{"version":3,"names":["types","inital_state","projects","project","state","action","type","GET_PROJECTS","payload","CREATE_PROJECT","new_project","updated_projects","localStorage","setItem","JSON","stringify","DELETE_PROJECT","project_id","filter","UPDATE_PROJECT","updates","console","log","index","map","indexOf","updated_project"],"sources":["/home/pc/ProjectManagement/ProjectManagementApp/react_app/src/ducks/project/reducer.js"],"sourcesContent":["import { types } from \"./actions\";\nconst inital_state = { projects: [] };\n\nconst project = (state = inital_state, action) => {\n  if (action.type == types.GET_PROJECTS) {\n    const { projects } = action.payload;\n    return { ...state, projects };\n  } else if (action.type == types.CREATE_PROJECT) {\n    const { new_project } = action.payload;\n    const updated_projects = [...state.projects, new_project];\n    localStorage.setItem(\"projects\", JSON.stringify(updated_projects));\n    return { ...state, projects: updated_projects };\n    // return { ...state, projects: [...state.projects, new_project] };\n  } else if (action.type == types.DELETE_PROJECT) {\n    const { projects, project_id } = action.payload;\n    const updated_projects = projects.filter(\n      (project) => project.project_id != project_id\n    );\n    localStorage.setItem(\"projects\", JSON.stringify(updated_projects));\n    return { projects: updated_projects };\n  } else if (action.type == types.UPDATE_PROJECT) {\n    const { projects, project_id, updates } = action.payload;\n    console.log(projects, project_id, updates);\n\n    const index = projects\n      .map((project) => project.project_id)\n      .indexOf(project_id);\n    const updated_project = (projects[index] = updates);\n    console.log(updated_project);\n    // console.log(new_project);\n    // const updated_projects = [...new_project];\n    // console.log(updated_projects);\n    // localStorage.setItem(\"projects\", JSON.stringify(updated_projects));\n    // console.log({ ...state, projects: updated_projects });\n    // return { projects: updated_projects };\n    return state;\n  } else {\n    return state;\n  }\n};\n\nexport default project;\n"],"mappings":"AAAA,SAASA,KAAT,QAAsB,WAAtB;AACA,MAAMC,YAAY,GAAG;EAAEC,QAAQ,EAAE;AAAZ,CAArB;;AAEA,MAAMC,OAAO,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBH,YAAyB;EAAA,IAAXI,MAAW;;EAChD,IAAIA,MAAM,CAACC,IAAP,IAAeN,KAAK,CAACO,YAAzB,EAAuC;IACrC,MAAM;MAAEL;IAAF,IAAeG,MAAM,CAACG,OAA5B;IACA,OAAO,EAAE,GAAGJ,KAAL;MAAYF;IAAZ,CAAP;EACD,CAHD,MAGO,IAAIG,MAAM,CAACC,IAAP,IAAeN,KAAK,CAACS,cAAzB,EAAyC;IAC9C,MAAM;MAAEC;IAAF,IAAkBL,MAAM,CAACG,OAA/B;IACA,MAAMG,gBAAgB,GAAG,CAAC,GAAGP,KAAK,CAACF,QAAV,EAAoBQ,WAApB,CAAzB;IACAE,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeJ,gBAAf,CAAjC;IACA,OAAO,EAAE,GAAGP,KAAL;MAAYF,QAAQ,EAAES;IAAtB,CAAP,CAJ8C,CAK9C;EACD,CANM,MAMA,IAAIN,MAAM,CAACC,IAAP,IAAeN,KAAK,CAACgB,cAAzB,EAAyC;IAC9C,MAAM;MAAEd,QAAF;MAAYe;IAAZ,IAA2BZ,MAAM,CAACG,OAAxC;IACA,MAAMG,gBAAgB,GAAGT,QAAQ,CAACgB,MAAT,CACtBf,OAAD,IAAaA,OAAO,CAACc,UAAR,IAAsBA,UADZ,CAAzB;IAGAL,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeJ,gBAAf,CAAjC;IACA,OAAO;MAAET,QAAQ,EAAES;IAAZ,CAAP;EACD,CAPM,MAOA,IAAIN,MAAM,CAACC,IAAP,IAAeN,KAAK,CAACmB,cAAzB,EAAyC;IAC9C,MAAM;MAAEjB,QAAF;MAAYe,UAAZ;MAAwBG;IAAxB,IAAoCf,MAAM,CAACG,OAAjD;IACAa,OAAO,CAACC,GAAR,CAAYpB,QAAZ,EAAsBe,UAAtB,EAAkCG,OAAlC;IAEA,MAAMG,KAAK,GAAGrB,QAAQ,CACnBsB,GADW,CACNrB,OAAD,IAAaA,OAAO,CAACc,UADd,EAEXQ,OAFW,CAEHR,UAFG,CAAd;IAGA,MAAMS,eAAe,GAAIxB,QAAQ,CAACqB,KAAD,CAAR,GAAkBH,OAA3C;IACAC,OAAO,CAACC,GAAR,CAAYI,eAAZ,EAR8C,CAS9C;IACA;IACA;IACA;IACA;IACA;;IACA,OAAOtB,KAAP;EACD,CAhBM,MAgBA;IACL,OAAOA,KAAP;EACD;AACF,CApCD;;AAsCA,eAAeD,OAAf"},"metadata":{},"sourceType":"module"}