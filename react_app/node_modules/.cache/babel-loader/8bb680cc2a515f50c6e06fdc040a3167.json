{"ast":null,"code":"import { types } from \"./actions\";\nconst inital_state = {\n  actions: []\n};\n\nconst action = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : inital_state;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type == types.GET_ACTIONS) {\n    const {\n      actions\n    } = action.payload;\n    return { ...state,\n      actions\n    };\n  } else if (action.type == types.CREATE_ACTION) {\n    const {\n      new_action\n    } = action.payload;\n    const updated_actions = [...state.actions, new_action];\n    localStorage.setItem(\"actions\", JSON.stringify(updated_actions));\n    return { ...state,\n      projects: updated_actions\n    };\n  } else if (action.type == types.DELETE_ACTION) {\n    const {\n      project_id,\n      action_name\n    } = action.payload;\n    const updated_actions = [...state.actions].filter(action => {\n      if (action.action_name != action_name) {\n        if (action.project_id != project_id.toString()) {\n          return action;\n        }\n      }\n    });\n    console.log(updated_actions);\n    return state;\n  } else {\n    return state;\n  }\n};\n\nexport default action;","map":{"version":3,"names":["types","inital_state","actions","action","state","type","GET_ACTIONS","payload","CREATE_ACTION","new_action","updated_actions","localStorage","setItem","JSON","stringify","projects","DELETE_ACTION","project_id","action_name","filter","toString","console","log"],"sources":["/home/pc/ProjectManagement/ProjectManagementApp/react_app/src/ducks/action/reducer.js"],"sourcesContent":["import { types } from \"./actions\";\nconst inital_state = { actions: [] };\nconst action = (state = inital_state, action) => {\n  if (action.type == types.GET_ACTIONS) {\n    const { actions } = action.payload;\n    return { ...state, actions };\n  } else if (action.type == types.CREATE_ACTION) {\n    const { new_action } = action.payload;\n    const updated_actions = [...state.actions, new_action];\n    localStorage.setItem(\"actions\", JSON.stringify(updated_actions));\n    return { ...state, projects: updated_actions };\n  } else if (action.type == types.DELETE_ACTION) {\n    const { project_id, action_name } = action.payload;\n    const updated_actions = [...state.actions].filter((action) => {\n      if (action.action_name != action_name) {\n        if (action.project_id != project_id.toString()) {\n          return action;\n        }\n      }\n    });\n    console.log(updated_actions);\n    return state;\n  } else {\n    return state;\n  }\n};\nexport default action;\n"],"mappings":"AAAA,SAASA,KAAT,QAAsB,WAAtB;AACA,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE;AAAX,CAArB;;AACA,MAAMC,MAAM,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBH,YAAyB;EAAA,IAAXE,MAAW;;EAC/C,IAAIA,MAAM,CAACE,IAAP,IAAeL,KAAK,CAACM,WAAzB,EAAsC;IACpC,MAAM;MAAEJ;IAAF,IAAcC,MAAM,CAACI,OAA3B;IACA,OAAO,EAAE,GAAGH,KAAL;MAAYF;IAAZ,CAAP;EACD,CAHD,MAGO,IAAIC,MAAM,CAACE,IAAP,IAAeL,KAAK,CAACQ,aAAzB,EAAwC;IAC7C,MAAM;MAAEC;IAAF,IAAiBN,MAAM,CAACI,OAA9B;IACA,MAAMG,eAAe,GAAG,CAAC,GAAGN,KAAK,CAACF,OAAV,EAAmBO,UAAnB,CAAxB;IACAE,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCC,IAAI,CAACC,SAAL,CAAeJ,eAAf,CAAhC;IACA,OAAO,EAAE,GAAGN,KAAL;MAAYW,QAAQ,EAAEL;IAAtB,CAAP;EACD,CALM,MAKA,IAAIP,MAAM,CAACE,IAAP,IAAeL,KAAK,CAACgB,aAAzB,EAAwC;IAC7C,MAAM;MAAEC,UAAF;MAAcC;IAAd,IAA8Bf,MAAM,CAACI,OAA3C;IACA,MAAMG,eAAe,GAAG,CAAC,GAAGN,KAAK,CAACF,OAAV,EAAmBiB,MAAnB,CAA2BhB,MAAD,IAAY;MAC5D,IAAIA,MAAM,CAACe,WAAP,IAAsBA,WAA1B,EAAuC;QACrC,IAAIf,MAAM,CAACc,UAAP,IAAqBA,UAAU,CAACG,QAAX,EAAzB,EAAgD;UAC9C,OAAOjB,MAAP;QACD;MACF;IACF,CANuB,CAAxB;IAOAkB,OAAO,CAACC,GAAR,CAAYZ,eAAZ;IACA,OAAON,KAAP;EACD,CAXM,MAWA;IACL,OAAOA,KAAP;EACD;AACF,CAvBD;;AAwBA,eAAeD,MAAf"},"metadata":{},"sourceType":"module"}